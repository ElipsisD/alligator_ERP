from asgiref.sync import sync_to_async
from telegram import Update, constants
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime
from bot.keyboards import get_areas_keyboard, cancel_keyboard, continue_keyboard, start_work_keyboard, confirm_keyboard, \
    cancel_with_find_keyboard
from bot.utils import validate_user
from core.settings import ITEM_NUMBER_DIGIT_COUNT
from erp.enums import WorkArea
from erp.models import Transfer, ItemNumber
from erp.utils import get_user_by_update

AREA, ITEM_NUMBER, AMOUNT, COMMENT, RESULT = range(10, 15)

PATTERN = 'transfer'


@validate_user
async def transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['message'] = update.callback_query.message
    user = await get_user_by_update(update)
    await update.callback_query.message.edit_text(
        text='–ù–∞ –∫–∞–∫–æ–π —É—á–∞—Å—Ç–æ–∫?', reply_markup=get_areas_keyboard(PATTERN, user.area)
    )
    return AREA


async def area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['area'] = update.callback_query.data.split('_')[-1]
    await update.callback_query.message.edit_text(
        text=f'–í–≤–µ–¥–∏—Ç–µ {ITEM_NUMBER_DIGIT_COUNT} —Ü–∏—Ñ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:\n\n'
             f'–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–ò–°–ö"\n',
        reply_markup=cancel_with_find_keyboard
    )
    return ITEM_NUMBER


async def item_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.delete()

    if len(update.message.text) != ITEM_NUMBER_DIGIT_COUNT:
        await context.chat_data["message"].edit_text(
            text=f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {ITEM_NUMBER_DIGIT_COUNT} —Ü–∏—Ñ—Ä!', reply_markup=cancel_with_find_keyboard
        )
        return ITEM_NUMBER

    context.chat_data['item_number'] = update.message.text
    await context.chat_data["message"].edit_text(
        text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/–∑–∞–≥–æ—Ç–æ–≤–æ–∫:', reply_markup=cancel_keyboard
    )
    return AMOUNT


async def amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.delete()
    context.chat_data['amount'] = int(update.message.text)
    await context.chat_data["message"].edit_text(
        text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–ê–õ–ï–ï":', reply_markup=continue_keyboard
    )
    return COMMENT


async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
        context.chat_data['comment'] = update.message.text
    except AttributeError:
        context.chat_data['comment'] = ''
    item_number_object = await sync_to_async(ItemNumber.objects.get)(
        number=f'–ù–§-{context.chat_data["item_number"]}',
    )
    context.chat_data['item_name'] = item_number_object.name
    await context.chat_data["message"].edit_text(
        text='–í—Å–µ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ?\n\n'
             f'<b>–ö—É–¥–∞:</b> {WorkArea.get_label_by_name(context.chat_data["area"])}\n'
             f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {context.chat_data["item_name"]}\n'
             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {context.chat_data["amount"]}\n'
             f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {context.chat_data.get("comment", "")}\n',
        parse_mode=constants.ParseMode.HTML,
        reply_markup=confirm_keyboard
    )
    return RESULT


async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_update(update)
    await sync_to_async(Transfer.objects.create)(
        author=user,
        item_number_id=f'–ù–§-{context.chat_data["item_number"]}',
        amount=int(context.chat_data['amount']),
        comment=context.chat_data['comment'],
        sender=user.area,
        receiver=context.chat_data['area'],
    )
    await context.chat_data["message"].edit_text(
        text=f'üì¶<b>–ü–ï–†–ï–ú–ï–°–¢–ò–õ</b>\n'
             f'üìÖ<b>{datetime.now().strftime("%d.%m.%Y %H:%M")}</b>\n\n'
             f'<b>–ö—É–¥–∞:</b> {WorkArea.get_label_by_name(context.chat_data["area"])}\n'
             f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {context.chat_data["item_name"]}\n'
             f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {context.chat_data["amount"]}\n'
             + (f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {context.chat_data["comment"]}\n' if context.chat_data["comment"] != '' else ''),
        parse_mode=constants.ParseMode.HTML,
    )
    mess = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
             f"–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏?\n",
        reply_markup=start_work_keyboard,
    )
    context.chat_data.clear()
    context.chat_data['message'] = mess
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_update(update)
    await context.chat_data['message'].edit_text(
        text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
             f"–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏?\n",
        reply_markup=start_work_keyboard,
    )
    context.chat_data.clear()
    return ConversationHandler.END


transfer_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(transfer, 'start_transfer')],
    states={
        AREA: [CallbackQueryHandler(area, r'^\w*_\w*$')],
        ITEM_NUMBER: [MessageHandler(filters.Regex(r'^\d*$'), item_number)],
        AMOUNT: [MessageHandler(filters.Regex(r'^0*[1-9]\d*$'), amount)],
        COMMENT: [MessageHandler(filters.Regex(r'[\d\w]*'), comment), CallbackQueryHandler(comment, 'continue')],
        RESULT: [CallbackQueryHandler(result, 'confirm')],
    },
    fallbacks=[CallbackQueryHandler(cancel, 'cancel')],
)
